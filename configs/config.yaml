data:
  models-root: /media/mpascual/PortableSSD/Meningiomas/tasks/superresolution/results/models
  hr-root: /media/mpascual/PortableSSD/Meningiomas/tasks/superresolution/high_resolution
  lr-root: /media/mpascual/PortableSSD/Meningiomas/tasks/superresolution/low_res
  spacings: [3mm, 5mm, 7mm]
  pulses: [t1c, t1n, t2w, t2f]
  models: [BSPLINE, ECLARE, SMORE, UNIRES]
  kfolds: 5
  seed: 42
  out: /media/mpascual/PortableSSD/Meningiomas/tasks/superresolution/kfolds_manifest.json

registration:
  atlas: /media/mpascual/PortableSSD/Meningiomas/ATLAS/sri24_spm8/templates
  t1: T1_brain.nii
  t2: T2_brain.nii
  epi: EPI_brain.nii
  pd: PD_brain.nii
  # To get the brain mask, just compute the largest connected component of the atlas T1 thresholded at 0.1. 
  brain_mask: brain_mask.nii

pacs_sr:
  # Experiment identity
  experiment_name: "PaCS_SR"
  disable_tqdm: false  
  # Tile geometry
  patch_size: 32        # p in {8,16,24,32}
  stride: 16            # use patch_size for non-overlap, or patch_size//2 for 50% overlap
  mixing_window: "hann"  # ["flat","hann"] When stride < patch_size, we use overlap-add to blend overlapping patches

  # Optimization
  simplex: true         # enforce w >= 0 and sum(w)=1
  lambda_ridge: 1.0e-4  # small ridge to condition the Q matrix per region
  laplacian_tau: 0.05    # optional smoothing of regional weights across adjacency graph
  # Edge-aware voxel reweighting for statistics accumulation
  lambda_edge: 0.25      # 0 disables edge emphasis
  edge_power: 2.0
  lambda_grad: 0.2      # 0 disables
  grad_operator: "sobel" # or "scharr"

  # Normalization
  normalize: "zscore"   # ['zscore'] for now
  # Registration
  use_registration: true  # enable atlas-based registration and brain masking
  # I/O and compute
  num_workers: 6        # parallel workers for per-patient evaluation
  parallel_backend: "loky"  # ["threading", "loky"] - loky better for SLURM, avoids GIL and memory fragmentation
  device: "cpu"         # reserved for future GPU-assisted ops

  # Metrics
  compute_lpips: false  # requires torch + lpips; optional
  ssim_axis: "axial"    # 'axial' | 'coronal' | 'sagittal' slice-wise averaging
  evaluate_train: true  # compute metrics on train set (can disable for speed)
  # Saving
  save_weight_volumes: true    # save per-expert tiled weight maps as compressed NPZ for inspection
  save_blends: true            # save blended predictions
  # Logging
  log_level: "INFO"            # logging level: DEBUG, INFO, WARNING, ERROR
  log_to_file: true            # save logs to file in output directory
  log_region_freq: 10          # log region optimization progress every N regions
  # Output directory
  out_root: /media/mpascual/PortableSSD/Meningiomas/tasks/superresolution/results/PACS_SR

visualizations:
  results_root: /media/mpascual/PortableSSD/Meningiomas/tasks/superresolution/results/models/PaCS_SR
  out_root: /media/mpascual/PortableSSD/Meningiomas/tasks/superresolution/results/figures/PaCS_SR
  dpi: 200

analysis:
  data:
    gt_dir: "/media/hddb/mario/data/glioma/high_resolution"              # Directory with GT volumes
    pred_dirs:                                   # Map of method name → directory with predictions
      SMORE: "/media/hddb/mario/results/models/SMORE"
      ECLARE: "/media/hddb/mario/results/models/ECLARE"
      BSPLINE: "/media/hddb/mario/results/models/BSPLINE"
      PACS_SR: "/media/hddb/mario/results/models/PACS_SR"
    mask_dir: null                               # Optional ROI masks dir; same filenames as GT
    file_ext: ".nii.gz"                          # One of [".nii.gz", ".nii", ".npy", ".npz"]
    sequences: ["T1C","T2W","T2F"]         # Used if filenames encode sequence
    cases_list: null                              # Optional txt/csv with case IDs (one per line)
    filename_pattern: "{case}_{seq}"             # Template to form basename (no extension)
    allow_missing: false                          # Skip pairs with any missing file if true
    dtype: "float32"                              # Array dtype after load
    norm:
      kind: "none"                                # ["none","zscore","minmax"]
      clip: null                                  # e.g., [0.0, 1.0]
  metrics:
    compute: ["psnr","ssim"]   # Subset of supported metrics
    crop_border: 0                                # Voxels to crop from all sides before metrics
    ssim:
      win_size: 7
      gaussian_weights: true
      sigma: 1.5
      use_sample_covariance: false
      data_range: "auto"                          # "auto" or numeric
    psnr:
      data_range: "auto"                          # "auto" or numeric
  stats:
    paired: true
    alpha: 0.05
    multiple_comparison: "fdr_bh"                 # Benjamini–Hochberg
    tests: ["ttest_paired","wilcoxon"]
    effect_sizes: ["cohens_dz","cliffs_delta"]
    bootstrap:
      enabled: true
      n_resamples: 5000
      ci: 0.95
    group_by: ["seq"]                             # Aggregate per sequence; options: ["seq"]
    compare_methods:                              # List pairs to compare; if null, all pairwise
      - ["SMORE","PACS_SR"]
      - ["ECLARE","PACS_SR"]
      - ["BSPLINE","PACS_SR"]
  io:
    output_dir: "results/analysis"
    write_csv: true
    write_json: true
    save_plots: false                             # Plots skipped unless you enable and add deps
    overwrite: true
  runtime:
    seed: 1337
    num_workers: 8                                # CPU processes
    chunk_voxels: 20000000                        # Process arrays in chunks to bound memory
    progress: true
    fail_fast: false


predict:
  pacs_sr_weights_path: "/path/to/saved/pacs_sr/weights.npy"
  experts:
    expert1:
      name: "BSPLINE"
      opinion_path: "/path/to/expert1/predictions"
    expert2:
      name: "ECLARE"
      opinion_path: "/path/to/expert2/predictions"
    expert3:
      name: "SMORE"
      opinion_path: "/path/to/expert3/predictions"
    expert4:
      name: "UNIRES"
      opinion_path: "/path/to/expert4/predictions"
  out_root: "/path/to/pacs_sr/predictions/output"